#pragma kernel SetToOnes
#pragma kernel PackToTexture
#pragma kernel UnpackFromTexture
#pragma kernel DirectionalCopy
#pragma kernel PropagateFromUpperLevel
#pragma kernel UnpackFromLightingTower

/**********************************************************************************/


RWStructuredBuffer<float> RSM_gv;
RWTexture3D<float> LPV_gv;
Texture3D<float> Input_gv;
uint GridResolution;
uint3 DX, DY, DZ;
uint4 CurrentCascadeIndex, UpperCascadeIndex;
RWTexture3D<float3> LightingTower;
float4 Ambients[2];


[numthreads(64, 1, 1)]
void SetToOnes(uint3 id : SV_DispatchThreadID)
{
    RSM_gv[id.x] = 1.0;
}

[numthreads(4, 4, 4)]
void PackToTexture(uint3 id : SV_DispatchThreadID)
{
    uint src_index = (id.z * GridResolution + id.y) * GridResolution + id.x;
    LPV_gv[id] = RSM_gv[src_index];
}

[numthreads(4, 4, 4)]
void UnpackFromTexture(uint3 id : SV_DispatchThreadID)
{
    uint dst_index = (id.z * GridResolution + id.y) * GridResolution + id.x;
    RSM_gv[dst_index] = LPV_gv[id];
}

[numthreads(4, 4, 4)]
void DirectionalCopy(uint3 id : SV_DispatchThreadID)
{
    uint3 dst_id = id + (GridResolution >> 2);
    uint3 input_id = id * 2;

    float4 transparency1 = float4(
        Input_gv[input_id],
        Input_gv[input_id + DX],
        Input_gv[input_id + DY],
        Input_gv[input_id + DX + DY]);

    input_id += DZ;
    float4 transparency2 = float4(
        Input_gv[input_id],
        Input_gv[input_id + DX],
        Input_gv[input_id + DY],
        Input_gv[input_id + DX + DY]);

    LPV_gv[dst_id] = dot(transparency1, transparency2) * 0.25;
}

float3 FetchBiggerLightCell(int3 id, uint3 cascade_index)
{
    if (cascade_index.y == 0)
    {
        /* last-level cascade: no higher level, use ambient light */
        return Ambients[cascade_index.x].rgb;
    }

    /* dot(id, DZ) is an odd integer here (>= -1).
       'texel' is a float3 where the DZ component has got a fraction 0.25, and the other two are
       each either 0.25 or 0.75.
    */
    float3 texel = (id - 0.5) * 0.5 + cascade_index;
    uint3 round_id = (uint3)texel;

    float3 col00 = LightingTower[round_id];
    float3 col01 = LightingTower[round_id + DX];
    float3 col10 = LightingTower[round_id + DY];
    float3 col11 = LightingTower[round_id + DX + DY];

    /* If frac(texel_dx) == 0.25, we keep col00&col10 with a factor 0.75, and col01&col11 with a
       factor 0.25.  If frac(texel_dx) == 0.75, it's the opposite. */
    float f = dot(texel - round_id, DX);
    col00 *= 1 - f;
    col01 *= f;
    col10 *= 1 - f;
    col11 *= f;

    /* Same with lastbit_dy */
    f = dot(texel - round_id, DY);
    col00 *= 1 - f;
    col01 *= 1 - f;
    col10 *= f;
    col11 *= f;

    return col00 + col01 + col10 + col11;
}

[numthreads(4, 4, 4)]
void PropagateFromUpperLevel(uint3 id : SV_DispatchThreadID)
{
    /* propagate light from a highest-level cascade into the next-lower-level cascade
       along the two directions DZ and -DZ */


        /*        -->>> DZ = direction of light propagation -->>>

              +-----+-----+-----+-----+
              |     |     |     |     |
              | id4 | id3 | id2 | id  |    LT[id].rgb :=
              | ----+-----+-----+-----+       LT[idbig].rgb * LT[id4].a * LT[id3].a * LT[id2].a;
              |            
              | idbig     |
              +-----------+

                    +-----+-----+-----+
                    |     |     |     |
                    | id3 | id2 | id  |    LT[id].rgb :=
                    | ----+-----+-----+       LT[idbig].rgb * LT[id3].a * LT[id2.a];
                    |
                    | idbig     |
                    +-----------+

              LightingTower[id] contains the color of light incoming into the cube
              at id through its incoming face.

              Input_gv[id] is the mean opacity inside the cube (a=0: fully opaque)

         Special cases if 'id' is near the edge:

              +-----+-----+
              |     |     |
              | id2 | id  |      if idz == 1
              | ----+-----+
              |
              | idbig     |
              +-----------+

                    +-----+
                    |     |
                    | id  |          if idz == 0
                    | ----+ ----+
                    |           |
                    | idbig     |
                    +-----------+
         */


    uint idz = dot(id, DZ);
    float alpha;
    float3 bigger;
    uint3 id2, id3;

    /* ---- forward pass ---- */

    if (idz < 2)
    {
        id2 = id + DZ;
        id3 = id;
        alpha = 1;
    }
    else
    {
        id2 = id - DZ;
        id3 = id2 - DZ;
        alpha = Input_gv[id3] * Input_gv[id2];
    }
    if (idz & 1)    /* first case above */
    {
        alpha *= Input_gv[id3 - DZ];
        bigger = FetchBiggerLightCell(id3, UpperCascadeIndex.xyz);
    }
    else    /* second case above */
    {
        bigger = FetchBiggerLightCell(id2, UpperCascadeIndex.xyz);
    }
    LightingTower[id + CurrentCascadeIndex.xyz] = bigger * alpha;

    /* ---- backward pass ---- */

    if (idz >= GridResolution - 2)
    {
        id2 = id - DZ;
        id3 = id;
        alpha = 1;
    }
    else
    {
        id2 = id + DZ;
        id3 = id2 + DZ;
        alpha = Input_gv[id3] * Input_gv[id2];
    }
    if (!(idz & 1))    /* first case above */
    {
        uint3 id4 = id3 + DZ;
        alpha *= Input_gv[id4];
        bigger = FetchBiggerLightCell(id4, UpperCascadeIndex.wyz);
    }
    else    /* second case above */
    {
        bigger = FetchBiggerLightCell(id3, UpperCascadeIndex.wyz);
    }
    LightingTower[id + CurrentCascadeIndex.wyz] = bigger * alpha;
}

[numthreads(4, 4, 4)]
void UnpackFromLightingTower(uint3 id : SV_DispatchThreadID)
{
    uint dst_index = (id.z * GridResolution + id.y) * GridResolution + id.x;
    float3 color = LightingTower[id + CurrentCascadeIndex.xyz];
    dst_index *= 3;
    RSM_gv[dst_index + 0] = color.r;
    RSM_gv[dst_index + 1] = color.g;
    RSM_gv[dst_index + 2] = color.b;
}
